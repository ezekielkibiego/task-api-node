openapi: 3.0.0
info:
  title: Task Management API
  description: API for managing tasks with authentication using JWT
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Task:
      type: object
      properties:
        id:
          type: string
          example: "67c8cdc89b094c7a954e3a76"
        title:
          type: string
          example: "Complete project documentation"
        description:
          type: string
          example: "Write the final report for the project"
        completed:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TaskInput:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          example: "Submit assignment"
        description:
          type: string
          example: "Upload the assignment before the deadline"
        completed:
          type: boolean
          example: false

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "your.jwt.token.here"

security:
  - BearerAuth: []

paths:
  /tasks:
    get:
      summary: Get all tasks
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        "401":
          description: Unauthorized (Invalid or missing token)

    post:
      summary: Create a new task
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskInput"
      responses:
        "201":
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400":
          description: Bad request (Missing title)
        "401":
          description: Unauthorized

  /tasks/{id}:
    get:
      summary: Get a task by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Task found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "404":
          description: Task not found
        "401":
          description: Unauthorized

    patch:
      summary: Update a task
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskInput"
      responses:
        "200":
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "404":
          description: Task not found
        "401":
          description: Unauthorized

    delete:
      summary: Delete a task
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Task deleted successfully
        "404":
          description: Task not found
        "401":
          description: Unauthorized

  /auth/login:
    post:
      summary: User login
      description: Returns a JWT token upon successful authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "securepassword"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Unauthorized (Invalid credentials)

  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "newuser@example.com"
                password:
                  type: string
                  example: "securepassword"
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Bad request (Invalid input)

